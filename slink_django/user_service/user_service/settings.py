"""
Django settings for user_service project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('USERS_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG')

HOST = 'user_service'

TIME_ZONE = os.environ.get('TIME_ZONE')
USE_TZ = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'user_service', 'kong', 'files-service']
FILES_SERVICE_URL = 'http://files-service:8000'

# SITE_NAME = "Slink"
# SITE_DOMAIN = "localhost:8080"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'djoser',
    'rest_framework',
    'cities_light',
    'storages',
    'users'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

CITIES_LIGHT_TRANSLATION_LANGUAGES = ['ru', 'en']

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_USERS_NAME'),
        'USER': os.environ.get('POSTGRES_USERS_USER'),
        'PASSWORD': os.environ.get('POSTGRES_USERS_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_USERS_HOST'),  # Хост (локальный)
        'PORT': 5432,  # Порт PostgreSQL
    }
}

RABBITMQ_USER = os.environ.get('RABBITMQ_USER')
RABBITMQ_PASSWORD = os.environ.get('RABBITMQ_PASSWORD')
RABBITMQ_SERVICES_VHOST = os.environ.get('RABBITMQ_SERVICES_VHOST')
RABBITMQ_CELERY_VHOST = os.environ.get('RABBITMQ_CELERY_VHOST')
RABBITMQ_PORT = os.environ.get('RABBITMQ_PORT')
RABBITMQ_MANAGEMENT_PORT = os.environ.get('RABBITMQ_MANAGEMENT_PORT')
RABBITMQ_HOST = os.environ.get('RABBITMQ_HOST')


REDIS_USERS_PASSWORD= os.environ.get('REDIS_USERS_PASSWORD')
REDIS_USERS_HOST = os.environ.get('REDIS_USERS_HOST')
REDIS_USERS_PORT = '6379'

# Настройка брокера для Celery (RabbitMQ)
CELERY_BROKER_URL = f'amqp://{RABBITMQ_USER}:{RABBITMQ_PASSWORD}@{RABBITMQ_HOST}:{RABBITMQ_PORT}/{RABBITMQ_CELERY_VHOST}'  # Или замени на свои параметры подключения к RabbitMQ

# Настройка backend для хранения результатов (можно Redis)
CELERY_RESULT_BACKEND = f'redis://:{REDIS_USERS_PASSWORD}@{REDIS_USERS_HOST}:{REDIS_USERS_PORT}/0'  # Redis используется для хранения результатов

# Опционально: Настройка задач на выполнение повторных попыток при неудаче
CELERY_TASK_DEFAULT_QUEUE = 'user_service_queue'
CELERY_TASK_DEFAULT_EXCHANGE = 'user_service_exchange'
CELERY_TASK_DEFAULT_ROUTING_KEY = 'user_service_routing_key'

# Таймаут на выполнение задач (например, 1 час)
CELERY_TASK_TIME_LIMIT = 60*5

# Настройка сериализаторов
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_TRACK_STARTED = True
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = False
# Опционально: Включить/выключить отслеживание завершенных задач (можно выключить, если результаты не нужны)
CELERY_IGNORE_RESULT = False


CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CORS_ALLOWED_ORIGINS = [
    "https://127.0.0.1:8080",
    "https://localhost:8080",
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

AUTH_USER_MODEL = 'users.User'
AUTHENTICATION_BACKENDS = ('users.backends.AuthBackend',)
DJOSER = {
    "EMAIL_FRONTEND_DOMAIN": "localhost:8080",
    "EMAIL_FRONTEND_PROTOCOL": "https",
    "EMAIL_FRONTEND_SITE_NAME": "Slink",
    'ACTIVATION_URL': 'registration/activation/{uid}/{token}',
    'PASSWORD_RESET_CONFIRM_URL': '/password_reset_confirm/{uid}/{token}',
    # 'SET_EMAIL_CONFIRM_URL': 'auth/email/set_new_email/confirm/{uid}/{token}/{new_email}',
    'USER_CREATE_PASSWORD_RETYPE': True,
    'SET_USERNAME_RETYPE': True,
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': True,
    'SEND_CONFIRMATION_EMAIL': True,
    'SEND_ACTIVATION_EMAIL': True,
    'TOKEN_MODEL': None,
    'SERIALIZERS': {
        'resend_activation': 'djoser.serializers.SendEmailResetSerializer',
        'password_reset': 'users.serializers.CustomSendEmailResetSerializer',
        'user_create': 'users.serializers.CustomUserCreateSerializer',
        'user_create_password_retype': 'users.serializers.CustomUserCreateSerializer',
        'user': 'users.serializers.ProfileUserSerializer',
        'current_user': 'users.serializers.ProfileUserSerializer',
    },
    'EMAIL': {
        'activation': 'users.emails.CustomActivationEmail',
        'confirmation': 'users.emails.CustomConfirmationEmail',
        'password_reset': 'users.emails.CustomPasswordResetEmail',
        'password_changed_confirmation': 'users.emails.CustomPasswordChangedConfirmationEmail',
        'username_changed_confirmation': 'users.emails.CustomUsernameChangedConfirmationEmail',
    }
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=180),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": os.environ.get('JWT_SECRET'),
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": HOST,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "users.serializers.CustomTokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
